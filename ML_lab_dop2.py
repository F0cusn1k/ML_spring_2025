import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import time


st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —à–∞–Ω—Å–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
    page_icon="üéì",
    layout="wide"
)


st.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —à–∞–Ω—Å–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")
st.markdown("### –ú–æ–¥–µ–ª—å: Random Forest –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")


@st.cache_data
def load_data():
    file_path = 'Admission_Predict_Ver1.1.csv'

    df = pd.read_csv(file_path)
    df = df.drop('Serial No.', axis=1)

    df.columns = ['GRE Score', 'TOEFL Score', 'University Rating', 'SOP',
                    'LOR', 'CGPA', 'Research', 'Chance of Admit']

    return df


df = load_data()
target_variable = 'Chance of Admit'


st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏")


st.sidebar.subheader("–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã Random Forest")
n_estimators = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)", 10, 500, 100, 10)
max_depth = st.sidebar.slider("–ú–∞–∫—Å. –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤—å–µ–≤ (max_depth)", 1, 30, 10, 1)
min_samples_split = st.sidebar.slider("–ú–∏–Ω. –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (min_samples_split)", 2, 20, 2, 1)
min_samples_leaf = st.sidebar.slider("–ú–∏–Ω. –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –ª–∏—Å—Ç–µ (min_samples_leaf)", 1, 20, 1, 1)

max_features_options = {
    "sqrt": "sqrt",
    "log2": "log2",
    "1/3 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤": 1/3,
    "1/2 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤": 0.5,
    "2/3 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤": 2/3,
    "–í—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏": 1.0,
}
max_features_selection = st.sidebar.selectbox(
    "–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (max_features)",
    list(max_features_options.keys()),
    index=0 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'sqrt'
)
max_features = max_features_options[max_features_selection]


test_size = st.sidebar.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏", 0.1, 0.5, 0.2, 0.05)


train_button = st.sidebar.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")


tab1, tab2, tab3 = st.tabs(["–î–∞–Ω–Ω—ã–µ", "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])

if df.empty:
    st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")


with tab1:
    st.header("–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")

    st.subheader("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    st.dataframe(df.head())

    st.subheader("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.dataframe(df.describe())

    st.subheader("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    missing_values = df.isnull().sum()
    st.dataframe(missing_values[missing_values > 0])
    if missing_values.sum() == 0:
        st.success("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
    else:
        st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.")


    st.subheader(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {target_variable}")
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.histplot(df[target_variable], kde=True, ax=ax, bins=30)
    ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ '{target_variable}'")
    ax.set_xlabel("–®–∞–Ω—Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
    ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
    st.pyplot(fig)

    st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
    numeric_cols = df.select_dtypes(include=np.number).columns
    if not numeric_cols.empty:
            correlation = df[numeric_cols].corr()
            fig, ax = plt.subplots(figsize=(12, 10))
            sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5, ax=ax)
            ax.set_title("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            st.pyplot(fig)
    else:
            st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.")


with tab2:
    st.header("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    if train_button:
        st.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")

        try:
            if target_variable not in df.columns:
                st.error(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{target_variable}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö DataFrame.")
                st.stop()

            X = df.drop(target_variable, axis=1)
            y = df[target_variable]

            st.write("–ü—Ä–∏–∑–Ω–∞–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:", X.columns.tolist())
            st.write(f"–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {target_variable}")


            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
            st.write(f"–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {X_train.shape[0]} –∑–∞–ø–∏—Å–µ–π")
            st.write(f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {X_test.shape[0]} –∑–∞–ø–∏—Å–µ–π")

            scaler = StandardScaler()
            X_train_scaled = scaler.fit_transform(X_train)
            X_test_scaled = scaler.transform(X_test)
            st.info("–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

            model = RandomForestRegressor(
                n_estimators=n_estimators,
                max_depth=max_depth,
                min_samples_split=min_samples_split,
                min_samples_leaf=min_samples_leaf,
                max_features=max_features,
                random_state=42,
                n_jobs=-1
            )

            progress_bar = st.progress(0)
            status_text = st.empty()

            start_time = time.time()
            for i in range(101):
                progress_bar.progress(i)
                status_text.text(f"–û–±—É—á–µ–Ω–∏–µ: {i}%...")
                time.sleep(0.005)

            model.fit(X_train_scaled, y_train)
            end_time = time.time()
            status_text.text(f"–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫.")

            y_pred_train = model.predict(X_train_scaled)
            y_pred_test = model.predict(X_test_scaled)

            st.session_state.model = model
            st.session_state.scaler = scaler
            st.session_state.X_train = X_train
            st.session_state.X_test = X_test
            st.session_state.y_train = y_train
            st.session_state.y_test = y_test
            st.session_state.y_pred_train = y_pred_train
            st.session_state.y_pred_test = y_pred_test
            st.session_state.feature_names = X.columns.tolist()
            st.session_state.target_variable_name = target_variable
            st.session_state.trained = True

            st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
            st.balloons()

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            st.exception(e)
    else:
        st.warning("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å' –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è.")

with tab3:
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")

    if 'trained' in st.session_state and st.session_state.trained:
        y_train = st.session_state.y_train
        y_pred_train = st.session_state.y_pred_train
        y_test = st.session_state.y_test
        y_pred_test = st.session_state.y_pred_test
        model = st.session_state.model
        feature_names = st.session_state.feature_names
        target_var_name = st.session_state.target_variable_name


        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")

        train_mse = mean_squared_error(y_train, y_pred_train)
        train_rmse = np.sqrt(train_mse)
        train_mae = mean_absolute_error(y_train, y_pred_train)
        train_r2 = r2_score(y_train, y_pred_train)

        test_mse = mean_squared_error(y_test, y_pred_test)
        test_rmse = np.sqrt(test_mse)
        test_mae = mean_absolute_error(y_test, y_pred_test)
        test_r2 = r2_score(y_test, y_pred_test)

        metrics_data = {
            "–ú–µ—Ç—Ä–∏–∫–∞": ["MSE (Mean Squared Error)", "RMSE (Root Mean Squared Error)", "MAE (Mean Absolute Error)", "R¬≤ (Coefficient of Determination)"],
            "–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞": [f"{train_mse:.4f}", f"{train_rmse:.4f}", f"{train_mae:.4f}", f"{train_r2:.4f}"],
            "–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞": [f"{test_mse:.4f}", f"{test_rmse:.4f}", f"{test_mae:.4f}", f"{test_r2:.4f}"]
        }
        metrics_df = pd.DataFrame(metrics_data)
        st.dataframe(metrics_df.set_index("–ú–µ—Ç—Ä–∏–∫–∞"))

        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("**–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞**")
            fig, ax = plt.subplots(figsize=(8, 6))
            ax.scatter(y_train, y_pred_train, alpha=0.5, label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
            ax.plot([y_train.min(), y_train.max()],
                    [y_train.min(), y_train.max()],
                    'r--', label='–ò–¥–µ–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è')
            ax.set_xlabel(f'–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π {target_var_name}')
            ax.set_ylabel(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π {target_var_name}')
            ax.set_title('–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: –§–∞–∫—Ç vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
            ax.legend()
            ax.grid(True)
            st.pyplot(fig)

        with col2:
            st.markdown("**–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞**")
            fig, ax = plt.subplots(figsize=(8, 6))
            ax.scatter(y_test, y_pred_test, alpha=0.5, label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
            ax.plot([y_test.min(), y_test.max()],
                    [y_test.min(), y_test.max()],
                    'r--', label='–ò–¥–µ–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è')
            ax.set_xlabel(f'–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π {target_var_name}')
            ax.set_ylabel(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π {target_var_name}')
            ax.set_title('–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: –§–∞–∫—Ç vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
            ax.legend()
            ax.grid(True)
            st.pyplot(fig)

        st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Feature Importance)")
        if hasattr(model, 'feature_importances_'):
            feature_importance = pd.DataFrame({
                '–ü—Ä–∏–∑–Ω–∞–∫': feature_names,
                '–í–∞–∂–Ω–æ—Å—Ç—å': model.feature_importances_
            }).sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False)

            fig, ax = plt.subplots(figsize=(10, max(6, len(feature_names) * 0.4)))
            sns.barplot(x='–í–∞–∂–Ω–æ—Å—Ç—å', y='–ü—Ä–∏–∑–Ω–∞–∫', data=feature_importance, ax=ax, palette='viridis')
            ax.set_title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ Random Forest')
            st.pyplot(fig)
        else:
            st.warning("–ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç 'feature_importances_'.")


        st.subheader("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤")
        residuals_train = y_train - y_pred_train
        residuals_test = y_test - y_pred_test

        col1_res, col2_res = st.columns(2)

        with col1_res:
            st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞)**")
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.histplot(residuals_test, kde=True, ax=ax, bins=30)
            ax.set_xlabel('–û—Å—Ç–∞—Ç–∫–∏ (–§–∞–∫—Ç - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)')
            ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            ax.set_title('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞)')
            ax.axvline(0, color='red', linestyle='--')
            st.pyplot(fig)

        with col2_res:
            st.markdown("**–û—Å—Ç–∞—Ç–∫–∏ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞)**")
            fig, ax = plt.subplots(figsize=(8, 6))
            ax.scatter(y_pred_test, residuals_test, alpha=0.5)
            ax.axhline(y=0, color='r', linestyle='--')
            ax.set_xlabel(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π {target_var_name}')
            ax.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏')
            ax.set_title('–û—Å—Ç–∞—Ç–∫–∏ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞)')
            ax.grid(True)
            st.pyplot(fig)

    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'.")


st.sidebar.markdown("---")
st.sidebar.subheader("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
st.sidebar.info(
    """
    –≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Random Forest
    —Å —Ü–µ–ª—å—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —à–∞–Ω—Å–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ ('Chance of Admit').

    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
    - –ó–∞–≥—Ä—É–∂–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ Random Forest.
    - –û–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.
    - –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è: –º–µ—Ç—Ä–∏–∫–∏, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π,
      –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤.
    """
)