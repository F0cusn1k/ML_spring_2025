import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import roc_auc_score, f1_score, recall_score, accuracy_score, confusion_matrix, roc_curve
import time
import warnings

warnings.filterwarnings("ignore")

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ (>50K) —Å XGBoost",
    page_icon="üöÄ",
    layout="wide"
)
st.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ (>50K USD) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º XGBoost")
st.markdown("### –ú–æ–¥–µ–ª—å: XGBoost Classifier")


df = pd.read_csv('adult_ready.csv')
df_app, features_app_list = df, df.drop('income', axis=1).columns.tolist()
target_var_app_name = 'income'

# 2. –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã XGBoost")
n_estimators_val = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)", 50, 500, 100, 10)
learning_rate_val = st.sidebar.select_slider(
    "–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (learning_rate)",
    options=[0.01, 0.03, 0.05, 0.1, 0.2, 0.3],
    value=0.1
)
max_depth_val = st.sidebar.slider("–ú–∞–∫—Å. –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤—å–µ–≤ (max_depth)", 2, 10, 5, 1)
subsample_val = st.sidebar.slider("–î–æ–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –¥–µ—Ä–µ–≤–∞ (subsample)", 0.5, 1.0, 0.8, 0.05)
colsample_bytree_val = st.sidebar.slider("–î–æ–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –¥–µ—Ä–µ–≤–∞ (colsample_bytree)", 0.5, 1.0, 0.8, 0.05)
gamma_val = st.sidebar.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (gamma)", 0.0, 0.5, 0.0, 0.05)
min_child_weight_val = st.sidebar.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –ø–æ—Ç–æ–º–∫–∞ (min_child_weight)", 1, 10, 1, 1)

# –£—á–µ—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
use_scale_pos_weight = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å scale_pos_weight –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤", value=True)
calculated_scale_pos_weight = 1.0
if use_scale_pos_weight and target_var_app_name in df_app.columns:
    counts = df_app[target_var_app_name].value_counts()
    if 1 in counts and 0 in counts and counts[1] > 0:
        calculated_scale_pos_weight = counts[0] / counts[1]
    st.sidebar.caption(f"–†–∞—Å—á–µ—Ç–Ω—ã–π scale_pos_weight: {calculated_scale_pos_weight:.2f}")


st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è")
test_size_val = st.sidebar.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏", 0.1, 0.5, 0.3, 0.05)
train_button = st.sidebar.button("–û–±—É—á–∏—Ç—å XGBoost –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

# 3. –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
tab_data, tab_results = st.tabs(["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è XGBoost"])

with tab_data:
    st.header("–û–±–∑–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    st.markdown(f"**–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ ({len(features_app_list)}):** ` {', '.join(features_app_list)} `")
    st.markdown(f"**–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:** `{target_var_app_name}` (0: <=50K, 1: >50K)")
    st.subheader("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫")
    st.dataframe(df_app.head())

    st.subheader("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    st.dataframe(df_app[features_app_list].describe())
    
    st.subheader(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π '{target_var_app_name}'")
    fig_dist_target, ax_dist_target = plt.subplots(figsize=(6,4))
    sns.countplot(x=target_var_app_name, data=df_app, ax=ax_dist_target, palette=["#66b3ff","#ff9999"])
    ax_dist_target.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ '{target_var_app_name}'")
    st.pyplot(fig_dist_target)

    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    num_features_to_plot = len(features_app_list)
    cols_per_row = 3
    num_rows = (num_features_to_plot - 1) // cols_per_row + 1
    fig_features_dist, axes = plt.subplots(num_rows, cols_per_row, figsize=(5 * cols_per_row, 4 * num_rows))
    axes = axes.flatten() # –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    for i, col_name in enumerate(features_app_list):
        sns.histplot(df_app[col_name], kde=True, ax=axes[i], bins=20)
        axes[i].set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ '{col_name}'", fontsize=10)
        axes[i].tick_params(axis='both', which='major', labelsize=8)
    # –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–∞–±–ø–ª–æ—Ç—ã
    for j in range(i + 1, len(axes)):
        fig_features_dist.delaxes(axes[j])
    plt.tight_layout()
    st.pyplot(fig_features_dist)

    st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    corr_matrix_app = df_app[features_app_list].corr()
    fig_corr_app, ax_corr_app = plt.subplots(figsize=(8, 6))
    sns.heatmap(corr_matrix_app, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5, ax=ax_corr_app, annot_kws={"size": 8})
    ax_corr_app.tick_params(axis='both', which='major', labelsize=8)
    st.pyplot(fig_corr_app)


if 'model_trained_app_xgb' not in st.session_state:
    st.session_state.model_trained_app_xgb = False

if train_button:
    st.session_state.model_trained_app_xgb = False
    with tab_results:
        st.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ XGBoost...")
        
        X = df_app[features_app_list]
        y = df_app[target_var_app_name]

        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=test_size_val, random_state=52, stratify=y
        )
        
        st.write(f"–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {X_train.shape[0]}, –¢–µ—Å—Ç–æ–≤–æ–π: {X_test.shape[0]}")

        model_app = XGBClassifier(
            n_estimators=n_estimators_val,
            learning_rate=learning_rate_val,
            max_depth=max_depth_val,
            subsample=subsample_val,
            colsample_bytree=colsample_bytree_val,
            gamma=gamma_val,
            min_child_weight=min_child_weight_val,
            scale_pos_weight=calculated_scale_pos_weight if use_scale_pos_weight else 1.0,
            random_state=52,
            use_label_encoder=False,
            eval_metric='logloss',
            n_jobs=-1
        )
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        start_time_train = time.time()
        model_app.fit(X_train, y_train)
        end_time_train = time.time()
        status_text.success(f"–û–±—É—á–µ–Ω–∏–µ XGBoost –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time_train - start_time_train:.2f} —Å–µ–∫.")

        y_pred_model = model_app.predict(X_test)
        y_pred_proba_model = model_app.predict_proba(X_test)[:, 1]

        st.session_state.y_test_model_xgb = y_test
        st.session_state.y_pred_model_xgb = y_pred_model
        st.session_state.y_pred_proba_model_xgb = y_pred_proba_model
        st.session_state.model_object_app_xgb = model_app
        st.session_state.features_used_app_xgb = features_app_list
        st.session_state.model_trained_app_xgb = True
        st.balloons()

if st.session_state.model_trained_app_xgb:
    with tab_results:
        if not train_button:
            st.info("–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è XGBoost. –î–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.")

        y_test_res = st.session_state.y_test_model_xgb
        y_pred_res = st.session_state.y_pred_model_xgb
        y_pred_proba_res = st.session_state.y_pred_proba_model_xgb
        model_res = st.session_state.model_object_app_xgb
        features_res = st.session_state.features_used_app_xgb

        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ XGBoost –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ")
        roc_auc_res = roc_auc_score(y_test_res, y_pred_proba_res)
        f1_res = f1_score(y_test_res, y_pred_res, pos_label=1)
        recall_res = recall_score(y_test_res, y_pred_res, pos_label=1)
        accuracy_res = accuracy_score(y_test_res, y_pred_res)

        col_m1, col_m2 = st.columns(2)
        col_m1.metric("ROC AUC", f"{roc_auc_res:.4f}")
        col_m2.metric("Accuracy", f"{accuracy_res:.4f}")
        col_m3, col_m4 = st.columns(2)
        col_m3.metric("F1-score (–¥–ª—è >50K)", f"{f1_res:.4f}")
        col_m4.metric("Recall (–¥–ª—è >50K)", f"{recall_res:.4f}")
        
        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
        cm_res = confusion_matrix(y_test_res, y_pred_res)
        fig_cm_res, ax_cm_res = plt.subplots(figsize=(5,4))
        sns.heatmap(cm_res, annot=True, fmt='d', cmap='viridis', ax=ax_cm_res)
        ax_cm_res.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ")
        ax_cm_res.set_ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–µ")
        st.pyplot(fig_cm_res)

        st.subheader("ROC-–∫—Ä–∏–≤–∞—è")
        fpr_res, tpr_res, _ = roc_curve(y_test_res, y_pred_proba_res, pos_label=1)
        fig_roc_res, ax_roc_res = plt.subplots(figsize=(6,4))
        ax_roc_res.plot(fpr_res, tpr_res, color='purple', lw=2, label=f'ROC AUC = {roc_auc_res:.3f}')
        ax_roc_res.plot([0, 1], [0, 1], color='grey', lw=2, linestyle='--')
        ax_roc_res.set_xlabel('False Positive Rate')
        ax_roc_res.set_ylabel('True Positive Rate')
        ax_roc_res.legend(loc="lower right")
        st.pyplot(fig_roc_res)

        st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (XGBoost)")
        importance_df = pd.DataFrame({
            '–ü—Ä–∏–∑–Ω–∞–∫': features_res,
            '–í–∞–∂–Ω–æ—Å—Ç—å': model_res.feature_importances_
        }).sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False)

        fig_imp_res, ax_imp_res = plt.subplots(figsize=(8, max(5, len(features_res) * 0.3)))
        sns.barplot(x='–í–∞–∂–Ω–æ—Å—Ç—å', y='–ü—Ä–∏–∑–Ω–∞–∫', data=importance_df, ax=ax_imp_res, palette='mako')
        ax_imp_res.tick_params(axis='y', labelsize=8)
        st.pyplot(fig_imp_res)

elif not train_button:
     with tab_results:
        st.warning("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±—É—á–∏—Ç—å XGBoost...' –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")

st.sidebar.markdown("---")
st.sidebar.info(
    """
    **–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (XGBoost):**
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ XGBoost –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ—Ö–æ–¥–∞
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Adult Census.
    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.
    """
)